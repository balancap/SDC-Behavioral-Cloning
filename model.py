"""Keras Behavioral Cloning model.
"""
import h5py

import cv2
import math
import numpy as np


from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.optimizers import SGD
from keras.utils import np_utils

from keras.utils.io_utils import HDF5Matrix


# General parameters.
BATCH_SIZE = 64
NB_EPOCHS = 200

# Image dimensions
IMG_ROWS, IMG_COLS = 160, 320
IMG_CHANNELS = 3


def cnn_model(shape):
    """Create the model learning the behavioral cloning from driving data.
    Inspired by NVIDIA paper on this topic.
    """
    model = Sequential()

    # First 5x5 convolutions layers.
    model.add(Convolution2D(24, 5, 5, subsample=(2, 2),
                            border_mode='valid',
                            input_shape=shape))
    model.add(Activation('relu'))
    model.add(Convolution2D(36, 5, 5, subsample=(2, 2),
                            border_mode='valid'))
    model.add(Activation('relu'))
    model.add(Convolution2D(48, 5, 5, subsample=(2, 2),
                            border_mode='valid'))
    model.add(Activation('relu'))

    # 3x3 Convolutions.
    model.add(Convolution2D(64, 3, 3,
                            border_mode='valid'))
    model.add(Activation('relu'))
    model.add(Convolution2D(64, 3, 3,
                            border_mode='valid'))
    model.add(Activation('relu'))

    # Flatten + FC layers.
    model.add(Flatten())
    model.add(Dense(100))
    model.add(Activation('relu'))
    model.add(Dropout(0.5))
    model.add(Dense(50))
    model.add(Activation('relu'))
    model.add(Dropout(0.5))
    model.add(Dense(10))
    model.add(Activation('relu'))
    model.add(Dropout(0.5))
    model.add(Dense(1))

    return model


def train_model(filename, split=16000):
    # Load train and validation data from filename.
    X_train = HDF5Matrix(filename, 'images',
                         start=0, end=split, normalizer=np.float32)
    y_train = HDF5Matrix(filename, 'angle', start=0, end=split)
    X_test = HDF5Matrix(filename, 'images',
                        start=split, end=None, normalizer=np.float32)
    y_test = HDF5Matrix(filename, 'angle', start=split, end=None)

    print('X_train shape:', X_train.shape)
    print(X_train.shape[0], 'train samples')
    print(X_test.shape[0], 'test samples')

    # CNN Model.
    model = cnn_model(X_train.shape[1:])

    # Train the model using SGD + momentum.
    sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
    model.compile(loss='mse',
                  optimizer=sgd,
                  metrics=['mean_absolute_error'])

    # X_train /= 255
    # X_test /= 255

    print('Using real-time data augmentation.')

    # this will do preprocessing and realtime data augmentation
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=False,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied)
    # datagen.fit(X_train)

    # fit the model on the batches generated by datagen.flow()
    model.fit_generator(datagen.flow(X_train, y_train, batch_size=BATCH_SIZE),
                        samples_per_epoch=X_train.shape[0],
                        nb_epoch=NB_EPOCHS,
                        validation_data=(X_test, y_test))

    # model.fit(X_train, y_train, batch_size=32, shuffle='batch')


def main():
    filename = './data/1/dataset.hdf5'
    split = 16000

    train_model(filename, split)


if __name__ == '__main__':
    main()
